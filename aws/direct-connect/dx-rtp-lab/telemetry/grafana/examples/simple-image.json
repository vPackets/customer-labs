{
  "id": 13,
  "gridPos": {
    "h": 11,
    "w": 6,
    "x": 0,
    "y": 11
  },
  "type": "agenty-flowcharting-panel",
  "title": "Optimization effects",
  "datasource": {
    "type": "influxdb",
    "uid": "PAA239D41A0EF0C37"
  },
  "flowchartsData": {
    "flowcharts": [
      {
        "name": "Main",
        "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<mxfile host=\"app.diagrams.net\" modified=\"2023-02-03T11:06:19.776Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\" version=\"20.8.16\" etag=\"rXkfS8eZ4rWLLIAcDfTD\" type=\"embed\"><diagram id=\"dQrrokcMvbK6OdQMx01c\" name=\"Page-1\"></diagram></mxfile>",
        "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
        "download": false,
        "type": "xml",
        "url": "http://<YourUrl>/<Your XML/drawio file/api>",
        "zoom": "100%",
        "center": true,
        "scale": true,
        "lock": true,
        "allowDrawio": false,
        "enableAnim": true,
        "tooltip": true,
        "grid": false,
        "bgColor": null,
        "editorUrl": "https://www.draw.io",
        "editorTheme": "kennedy"
      }
    ]
  },
  "format": "short",
  "graphId": "flowchart_13",
  "newFlag": false,
  "rulesData": {
    "rulesData": [
      {
        "order": 1,
        "pattern": "A-series",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "cooling_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(245, 54, 54, 0.9)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "cooling_consumption_before",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 2,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "consumption_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(237, 129, 40, 0.89)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "equipment_consumption_before",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 3,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "hot_aisle_temperature_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(237, 129, 40, 0.89)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "hot_aisle_before",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 4,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "cold_aisle_temperature_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(237, 129, 40, 0.89)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "cold_aisle_before",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 5,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "co2_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "#F2495C"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "co2_before",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 6,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "cooling_after",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(237, 129, 40, 0.89)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "cooling_consumption_after",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 7,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "consumption_after",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(237, 129, 40, 0.89)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "equipment_consumption_after",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 8,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "hot_aisle_temperature_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(237, 129, 40, 0.89)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "hot_aisle_after",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 9,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "cold_aisle_temperature_before",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(50, 172, 45, 0.97)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "cold_aisle_after",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      },
      {
        "order": 10,
        "pattern": "/.*/",
        "unit": "short",
        "type": "number",
        "metricType": "serie",
        "alias": "co2_after",
        "refId": "A",
        "column": "Time",
        "hidden": false,
        "aggregation": "current",
        "decimals": 2,
        "colors": [
          "rgba(50, 172, 45, 0.97)"
        ],
        "reduce": true,
        "dateFormat": "YYYY-MM-DD HH:mm:ss",
        "thresholds": [],
        "stringThresholds": [],
        "invert": false,
        "gradient": false,
        "overlayIcon": false,
        "tooltip": false,
        "tooltipLabel": "",
        "tooltipColors": false,
        "tooltipOn": "a",
        "tpDirection": "v",
        "tpGraph": false,
        "tpGraphSize": "100%",
        "tpGraphType": "line",
        "tpGraphLow": null,
        "tpGraphHigh": null,
        "tpGraphScale": "linear",
        "shapeProp": "id",
        "shapeRegEx": true,
        "shapeData": [
          {
            "pattern": "co2_after",
            "hidden": false,
            "style": "fillColor",
            "colorOn": "a"
          }
        ],
        "textProp": "id",
        "textRegEx": true,
        "textData": [],
        "linkProp": "id",
        "linkRegEx": true,
        "linkData": [],
        "eventProp": "id",
        "eventRegEx": false,
        "eventData": [],
        "mappingType": 1,
        "valueData": [],
        "rangeData": [],
        "sanitize": false
      }
    ]
  },
  "targets": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PAA239D41A0EF0C37"
      },
      "hide": true,
      "query": "eaton_sum = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"eaton_input_power\")\n  |> filter(fn: (r) => r[\"_field\"] == \"inputWatts\")\n  |> last()\n  |> drop(columns: [\"agent_host\"])\n  |> drop(columns: [\"phase\"])\n  |> aggregateWindow(every: 1m, fn: sum, createEmpty: false)\n\n  raritan_sum = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"raritan-pdu\" and r.name =~ /model\\/pdu\\/0-pdu-2[1-6][b,r]-eu-spdc.cisco.com/)\n  |> filter(fn: (r) => r._field == \"activePower\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000.0}))\n  |> last()\n  |> drop(columns: [\"name\"])\n  |> aggregateWindow(every: 1m, fn: sum, createEmpty: false)\n\n  join(\n\ttables: {d1: eaton_sum, d2: raritan_sum},\n    on: [\"_time\"]\n  )\n  |> map(fn: (r) => ({r with _value_d1: float(v: r._value_d1)}))\n  |> map(fn: (r) => ({r with _value: r._value_d1 + r._value_d2 }))\n  |> map(fn: (r) => ({\n    r with\n        total_power: r._value,\n  }))\n  |> keep(columns: [\"total_power\"])",
      "refId": "total_power"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PAA239D41A0EF0C37"
      },
      "hide": true,
      "query": "timeInterval = 1h\n\neaton_sum = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"eaton_input_power\")\n  |> filter(fn: (r) => r[\"_field\"] == \"inputWatts\")\n  |> last()\n  |> drop(columns: [\"agent_host\"])\n  |> drop(columns: [\"phase\"])\n  |> aggregateWindow(every: 1m, fn: sum, createEmpty: false)\n  |> map(fn: (r) => ({r with _value: float(v: r._value)}))\n\nraritan_sum = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"raritan-pdu\" and r.name =~ /model\\/pdu\\/0-pdu-2[1-6][b,r]-eu-spdc.cisco.com/)\n  |> filter(fn: (r) => r._field == \"activePower\")\n  |> map(fn: (r) => ({r with _value: r._value * 1000.0}))\n  |> last()\n  |> drop(columns: [\"name\"])\n  |> aggregateWindow(every: 1m, fn: sum, createEmpty: false)\n  |> map(fn: (r) => ({r with _value: float(v: r._value)}))\n\n  \n\nunion = union(tables: [eaton_sum, raritan_sum])\n  |> aggregateWindow(every: timeInterval, fn: sum)\n  |> truncateTimeColumn(unit: timeInterval)\n  |> keep(columns: [\"_value\", \"_time\"])\n  |> group(columns: [\"_time\"])\n  |> first()\n  |> group()\n\nco2eqkwh = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) =>\n      r._measurement == \"electricity-map\" and\n      r._field == \"carbonIntensity\" and r.cc == \"IT-CNO\")\n  |> drop(columns: [\"_measurement\"])\n  |> truncateTimeColumn(unit: timeInterval)\n  |> drop(columns: [\"_measurement\", \"_stop\", \"_start\"])\n  |> window(every: timeInterval)\n  |> mean()\n  |> duplicate(as: \"_time\", column: \"_start\")\n  |> drop(columns: [\"_measurement\", \"_stop\", \"_start\"])\n  |> truncateTimeColumn(unit: timeInterval)\n  |> group(columns: [\"_time\"])\n  |> first()\n\nj_co2 = join(\n  tables: {t1: union, t2: co2eqkwh},\n    on: [\"_time\"],\n  )\n    |> map(fn: (r) => ({\n    r with\n        _value: float(v: r._value_t1) * float(v: r._value_t2) / 1000.0,\n  }))\n    |> map(fn: (r) => ({\n    r with\n        total_co2: r._value,\n  }))\n  |> keep(columns: [\"total_power\"])\n    |> keep(columns: [\"_time\", \"total_co2\", \"cc\"])\n    |> group()\n    |> yield()\n",
      "refId": "co2_emission"
    }
  ],
  "valueName": "current",
  "version": "0.9.0"
}