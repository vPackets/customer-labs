{
  "id": 4,
  "gridPos": {
    "h": 8,
    "w": 17,
    "x": 0,
    "y": 8
  },
  "type": "timeseries",
  "title": "Total input/output data rate",
  "datasource": {
    "type": "influxdb",
    "uid": "PAA239D41A0EF0C37"
  },
  "description": "",
  "fieldConfig": {
    "defaults": {
      "custom": {
        "drawStyle": "line",
        "lineInterpolation": "linear",
        "barAlignment": 0,
        "lineWidth": 1,
        "fillOpacity": 0,
        "gradientMode": "none",
        "spanNulls": false,
        "showPoints": "auto",
        "pointSize": 5,
        "stacking": {
          "mode": "none",
          "group": "A"
        },
        "axisPlacement": "auto",
        "axisLabel": "",
        "scaleDistribution": {
          "type": "linear"
        },
        "hideFrom": {
          "tooltip": false,
          "viz": false,
          "legend": false
        },
        "thresholdsStyle": {
          "mode": "off"
        }
      },
      "color": {
        "mode": "palette-classic"
      },
      "thresholds": {
        "mode": "absolute",
        "steps": [
          {
            "color": "green",
            "value": null
          },
          {
            "color": "red",
            "value": 80
          }
        ]
      },
      "mappings": [],
      "unit": "Kbits"
    },
    "overrides": [
      {
        "matcher": {
          "id": "byFrameRefID",
          "options": "A"
        },
        "properties": [
          {
            "id": "displayName",
            "value": "Input - ${host_c8k}"
          }
        ]
      },
      {
        "matcher": {
          "id": "byFrameRefID",
          "options": "B"
        },
        "properties": [
          {
            "id": "displayName",
            "value": "Output - ${host_c8k}"
          }
        ]
      }
    ]
  },
  "options": {
    "tooltip": {
      "mode": "single"
    },
    "legend": {
      "displayMode": "list",
      "placement": "bottom",
      "calcs": []
    }
  },
  "targets": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PAA239D41A0EF0C37"
      },
      "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\ninput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"input_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\ninput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: input_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_input_data_rate = input_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n  |> yield()\n",
      "refId": "A"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PAA239D41A0EF0C37"
      },
      "hide": false,
      "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\noutput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"output_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\noutput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: output_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_output_data_rate = output_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n  |> yield()\n",
      "refId": "B"
    }
  ]
}

